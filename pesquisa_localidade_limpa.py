import os
import time
from agno.agent import Agent
from agno.tools.tavily import TavilyTools
from agno.models.openai import OpenAIChat
from dotenv import load_dotenv
import re

load_dotenv()

class PesquisaLocalidadeLimpa:
    def __init__(self):
        """Inicializa a pesquisa com verifica√ß√£o de chaves"""
        self.timeout = 30
        self.cache = {}
        
        # Verificar se as chaves est√£o configuradas
        self.tavily_key = os.getenv('TAVILY_API_KEY')
        self.openai_key = os.getenv('OPENAI_API_KEY')
        
        if not self.tavily_key or self.tavily_key == 'sua_chave_tavily_aqui':
            print("‚ö†Ô∏è AVISO: TAVILY_API_KEY n√£o configurada!")
            print("üìù Configure sua chave no arquivo .env")
            self.agent = None
        else:
            try:
                # Configurar modelo OpenAI
                model = OpenAIChat(id="gpt-4o-mini")
                
                # Criar agente com Tavily
                self.agent = Agent(tools=[TavilyTools()])
                self.agent.model = model
                print("‚úÖ Tavily configurado corretamente!")
                
            except Exception as e:
                print(f"‚ùå Erro ao configurar Tavily: {e}")
                self.agent = None
        
    def gerar_texto_pesquisa_localidade(self, cidade, bairro):
        """Gera texto de pesquisa REAL usando Tavily com texto limpo"""
        try:
            # Verificar cache primeiro
            cache_key = f"{cidade}_{bairro}_limpo"
            if cache_key in self.cache:
                print("üìã Usando dados do cache")
                return self.cache[cache_key]
            
            # Verificar se Tavily est√° configurado
            if not self.agent:
                print("‚ö†Ô∏è Tavily n√£o configurado, usando texto padr√£o")
                return self._gerar_texto_padrao_fallback(cidade, bairro)
            
            print(f"üîç Pesquisando informa√ß√µes REAIS para {bairro}, {cidade}...")
            start_time = time.time()
            
            # Query simples e direta
            query = f"""Informa√ß√µes sobre {bairro} em {cidade} S√£o Paulo: com√©rcio, servi√ßos, lazer, seguran√ßa e potencial econ√¥mico. Foque especificamente no bairro {bairro}."""
            
            # Executar pesquisa REAL
            response = self.agent.run(query)
            tempo_pesquisa = time.time() - start_time
            
            print(f"‚è±Ô∏è Pesquisa REAL conclu√≠da em {tempo_pesquisa:.1f} segundos")
            
            # Verificar se a resposta √© v√°lida
            if response and str(response).strip():
                # Processar resposta real com limpeza avan√ßada
                texto_limpo = self._limpar_resposta_completa(str(response), cidade, bairro)
                
                if texto_limpo and len(texto_limpo) > 50:
                    self.cache[cache_key] = texto_limpo
                    print("‚úÖ Informa√ß√µes reais obtidas e limpas com sucesso!")
                    return texto_limpo
                else:
                    print("‚ö†Ô∏è Resposta muito curta, usando texto padr√£o")
                    return self._gerar_texto_padrao_fallback(cidade, bairro)
            else:
                print("‚ö†Ô∏è Resposta vazia, usando texto padr√£o")
                return self._gerar_texto_padrao_fallback(cidade, bairro)
                
        except Exception as e:
            print(f"‚ùå Erro na pesquisa real: {e}")
            return self._gerar_texto_padrao_fallback(cidade, bairro)
    
    def _limpar_resposta_completa(self, texto, cidade, bairro):
        """Limpa completamente a resposta do Tavily"""
        if not texto:
            return ""
        
        # Limpeza b√°sica
        texto = str(texto)
        
        # Remover caracteres de escape e formata√ß√£o
        texto = texto.replace('\\n', ' ')
        texto = texto.replace('\n', ' ')
        texto = texto.replace('\\"', '"')
        texto = texto.replace('\\', ' ')
        
        # Remover formata√ß√£o markdown
        texto = re.sub(r'\*\*([^*]+)\*\*', r'\1', texto)  # **texto** -> texto
        texto = re.sub(r'\*([^*]+)\*', r'\1', texto)      # *texto* -> texto
        texto = re.sub(r'###?\s*', '', texto)             # ### -> vazio
        texto = re.sub(r'##\s*', '', texto)               # ## -> vazio
        texto = re.sub(r'#\s*', '', texto)                # # -> vazio
        
        # Remover listas markdown
        texto = re.sub(r'-\s*', '‚Ä¢ ', texto)
        texto = re.sub(r'\d+\.\s*', '‚Ä¢ ', texto)
        
        # Remover URLs e links
        texto = re.sub(r'http[s]?://[^\s]+', '', texto)
        texto = re.sub(r'\([^)]*\.html[^)]*\)', '', texto)
        texto = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', texto)
        
        # Remover caracteres especiais desnecess√°rios
        texto = re.sub(r'[^\w\s\.,!?‚Ä¢\-√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á]', ' ', texto)
        
        # Limpar espa√ßos m√∫ltiplos
        texto = re.sub(r'\s+', ' ', texto)
        texto = texto.strip()
        
        # Dividir em se√ß√µes
        secoes = self._extrair_secoes_limpas(texto, cidade, bairro)
        
        # Montar texto final estruturado
        texto_final = ""
        
        if secoes['comercio']:
            texto_final += f"Com√©rcio, Lazer e Comodidade:\n{secoes['comercio']}\n\n"
        
        if secoes['seguranca']:
            texto_final += f"Seguran√ßa:\n{secoes['seguranca']}\n\n"
        
        if secoes['potencial']:
            texto_final += f"Potencial Econ√¥mico e de Crescimento Imobili√°rio:\n{secoes['potencial']}\n\n"
        
        # Se n√£o conseguiu extrair se√ß√µes, usar texto geral limpo
        if not texto_final.strip():
            texto_resumido = self._resumir_texto(texto, 600)
            texto_final = f"Informa√ß√µes sobre {bairro}, {cidade}:\n{texto_resumido}"
        
        return texto_final.strip()
    
    def _extrair_secoes_limpas(self, texto, cidade, bairro):
        """Extrai se√ß√µes espec√≠ficas do texto limpo"""
        secoes = {
            'comercio': '',
            'seguranca': '',
            'potencial': ''
        }
        
        texto_lower = texto.lower()
        
        # Palavras-chave para cada se√ß√£o
        palavras_comercio = ['com√©rcio', 'mercado', 'supermercado', 'padaria', 'farm√°cia', 'posto', 'banco', 'loja', 'shopping', 'restaurante', 'comercial']
        palavras_seguranca = ['seguran√ßa', 'criminalidade', 'viol√™ncia', 'policial', 'crime', 'roubo', 'furto', 'homic√≠dio', 'policiamento']
        palavras_potencial = ['crescimento', 'investimento', 'desenvolvimento', 'valoriza√ß√£o', 'econ√¥mico', 'imobili√°rio', 'crescimento', 'expans√£o']
        
        # Extrair se√ß√µes
        for secao, palavras in [('comercio', palavras_comercio), ('seguranca', palavras_seguranca), ('potencial', palavras_potencial)]:
            for palavra in palavras:
                if palavra in texto_lower:
                    # Buscar contexto ao redor da palavra
                    inicio = texto_lower.find(palavra)
                    if inicio != -1:
                        # Pegar contexto maior para ter mais informa√ß√µes
                        inicio_contexto = max(0, inicio - 150)
                        fim_contexto = min(len(texto), inicio + 400)
                        contexto = texto[inicio_contexto:fim_contexto]
                        
                        # Limpar o contexto
                        contexto_limpo = self._limpar_contexto(contexto)
                        if contexto_limpo and len(contexto_limpo) > 30:
                            secoes[secao] += contexto_limpo + " "
        
        # Limpar e limitar tamanho das se√ß√µes
        for key in secoes:
            secoes[key] = secoes[key].strip()
            # Remover repeti√ß√µes
            secoes[key] = self._remover_repeticoes(secoes[key])
            # Limitar tamanho
            if len(secoes[key]) > 350:
                secoes[key] = secoes[key][:350] + "..."
        
        return secoes
    
    def _limpar_contexto(self, contexto):
        """Limpa um contexto espec√≠fico"""
        if not contexto:
            return ""
        
        # Limpeza b√°sica
        contexto = contexto.strip()
        contexto = re.sub(r'\s+', ' ', contexto)
        
        # Capitalizar primeira letra
        if contexto:
            contexto = contexto[0].upper() + contexto[1:]
        
        # Adicionar ponto final se necess√°rio
        if contexto and not contexto.endswith(('.', '!', '?')):
            contexto += "."
        
        return contexto
    
    def _remover_repeticoes(self, texto):
        """Remove repeti√ß√µes excessivas no texto"""
        if not texto:
            return ""
        
        palavras = texto.split()
        texto_limpo = []
        palavras_anteriores = set()
        
        for palavra in palavras:
            palavra_limpa = palavra.lower().strip('.,!?')
            if palavra_limpa not in palavras_anteriores or len(palavras_anteriores) > 20:
                texto_limpo.append(palavra)
                palavras_anteriores.add(palavra_limpa)
                if len(palavras_anteriores) > 50:  # Resetar a cada 50 palavras
                    palavras_anteriores.clear()
        
        return ' '.join(texto_limpo)
    
    def _resumir_texto(self, texto, max_chars):
        """Resume o texto para o tamanho m√°ximo especificado"""
        if len(texto) <= max_chars:
            return texto
        
        # Tentar quebrar em frase completa
        texto_resumido = texto[:max_chars]
        ultimo_ponto = texto_resumido.rfind('.')
        
        if ultimo_ponto > max_chars * 0.7:  # Se encontrou ponto em pelo menos 70% do texto
            return texto_resumido[:ultimo_ponto + 1]
        else:
            return texto_resumido + "..."
    
    def _gerar_texto_padrao_fallback(self, cidade, bairro):
        """Texto padr√£o quando n√£o consegue fazer pesquisa real"""
        return f"""Com√©rcio, Lazer e Comodidade:
{bairro} em {cidade} oferece com√©rcio local e servi√ßos essenciais b√°sicos. 
Disponibilidade de mercados, padarias e farm√°cias no entorno da regi√£o.

Seguran√ßa:
{cidade} apresenta n√≠veis de seguran√ßa t√≠picos da regi√£o. 
{bairro} mant√©m caracter√≠sticas de seguran√ßa compat√≠veis com o perfil da cidade.

Potencial Econ√¥mico e de Crescimento Imobili√°rio:
{bairro} em {cidade} possui potencial de desenvolvimento baseado na 
localiza√ß√£o e infraestrutura dispon√≠vel na regi√£o.

‚ö†Ô∏è NOTA: Informa√ß√µes gerais - configure a chave TAVILY_API_KEY para obter dados espec√≠ficos e atualizados."""
    
    def verificar_configuracao(self):
        """Verifica se a configura√ß√£o est√° correta"""
        print("üîç Verificando configura√ß√£o...")
        
        if not self.tavily_key or self.tavily_key == 'sua_chave_tavily_aqui':
            print("‚ùå TAVILY_API_KEY n√£o configurada!")
            print("üìù Configure sua chave no arquivo .env")
            print("üîó Obtenha uma chave gratuita em: https://tavily.com/")
            return False
        
        if not self.openai_key or self.openai_key == 'sua_chave_openai_aqui':
            print("‚ùå OPENAI_API_KEY n√£o configurada!")
            print("üìù Configure sua chave no arquivo .env")
            return False
        
        if self.agent:
            print("‚úÖ Configura√ß√£o correta!")
            return True
        else:
            print("‚ùå Erro na configura√ß√£o do agente")
            return False

def main():
    """Teste da vers√£o limpa"""
    print("üöÄ TESTE DA PESQUISA LIMPA")
    print("=" * 50)
    
    pesquisa = PesquisaLocalidadeLimpa()
    
    # Verificar configura√ß√£o
    if not pesquisa.verificar_configuracao():
        print("\n‚ö†Ô∏è Configure as chaves de API para testar a pesquisa real")
        return
    
    cidade = "Taquarituba"
    bairro = "Jardim Santa Virg√≠nia"
    
    print(f"\nüìç Testando pesquisa real: {bairro}, {cidade}")
    
    start_time = time.time()
    texto = pesquisa.gerar_texto_pesquisa_localidade(cidade, bairro)
    total_time = time.time() - start_time
    
    print(f"\n‚è±Ô∏è Tempo total: {total_time:.1f} segundos")
    
    if texto:
        print("\n‚úÖ Resultado LIMPO:")
        print("=" * 50)
        print(texto)
        print("=" * 50)
    else:
        print("\n‚ö†Ô∏è Nenhuma informa√ß√£o encontrada")

if __name__ == "__main__":
    main()
