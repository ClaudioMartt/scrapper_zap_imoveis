import os
import time
from agno.agent import Agent
from agno.tools.tavily import TavilyTools
from agno.models.openai import OpenAIChat
from dotenv import load_dotenv
import re

load_dotenv()

class PesquisaLocalidadeComIA:
    def __init__(self):
        """Inicializa a pesquisa com verifica√ß√£o de chaves"""
        self.timeout = 30
        self.cache = {}
        
        # Verificar se as chaves est√£o configuradas
        self.tavily_key = os.getenv('TAVILY_API_KEY')
        self.openai_key = os.getenv('OPENAI_API_KEY')
        
        if not self.tavily_key or self.tavily_key == 'sua_chave_tavily_aqui':
            print("‚ö†Ô∏è AVISO: TAVILY_API_KEY n√£o configurada!")
            self.agent = None
        else:
            try:
                model = OpenAIChat(id="gpt-4o-mini")
                self.agent = Agent(tools=[TavilyTools()])
                self.agent.model = model
                print("‚úÖ Tavily configurado corretamente!")
                
            except Exception as e:
                print(f"‚ùå Erro ao configurar Tavily: {e}")
                self.agent = None
        
    def gerar_texto_pesquisa_localidade(self, cidade, bairro):
        """Gera texto de pesquisa REAL usando Tavily + IA para tratamento"""
        try:
            # Verificar cache primeiro
            cache_key = f"{cidade}_{bairro}_ia"
            if cache_key in self.cache:
                print("üìã Usando dados do cache")
                return self.cache[cache_key]
            
            # Verificar se Tavily est√° configurado
            if not self.agent:
                print("‚ö†Ô∏è Tavily n√£o configurado, usando texto padr√£o")
                return self._gerar_texto_padrao_fallback(cidade, bairro)
            
            print(f"üîç Pesquisando informa√ß√µes REAIS para {bairro}, {cidade}...")
            start_time = time.time()
            
            # Query simples e direta para o Tavily
            query = f"""Informa√ß√µes sobre {bairro} em {cidade} S√£o Paulo: com√©rcio, servi√ßos, lazer, seguran√ßa e potencial econ√¥mico. Foque especificamente no bairro {bairro}."""
            
            # Executar pesquisa REAL no Tavily
            response = self.agent.run(query)
            tempo_pesquisa = time.time() - start_time
            
            print(f"‚è±Ô∏è Pesquisa REAL conclu√≠da em {tempo_pesquisa:.1f} segundos")
            
            # Verificar se a resposta √© v√°lida
            if response and str(response).strip():
                print("ü§ñ Submetendo dados √† IA para tratamento e organiza√ß√£o...")
                
                # Submeter √† IA para tratamento e organiza√ß√£o
                texto_tratado = self._tratar_com_ia(str(response), cidade, bairro)
                
                if texto_tratado and len(texto_tratado) > 50:
                    self.cache[cache_key] = texto_tratado
                    print("‚úÖ Informa√ß√µes tratadas pela IA com sucesso!")
                    return texto_tratado
                else:
                    print("‚ö†Ô∏è IA n√£o conseguiu tratar os dados, usando texto padr√£o")
                    return self._gerar_texto_padrao_fallback(cidade, bairro)
            else:
                print("‚ö†Ô∏è Resposta vazia, usando texto padr√£o")
                return self._gerar_texto_padrao_fallback(cidade, bairro)
                
        except Exception as e:
            print(f"‚ùå Erro na pesquisa real: {e}")
            return self._gerar_texto_padrao_fallback(cidade, bairro)
    
    def _tratar_com_ia(self, dados_brutos, cidade, bairro):
        """Submete os dados brutos √† IA para tratamento e organiza√ß√£o"""
        try:
            # Prompt espec√≠fico para a IA organizar os dados
            prompt_ia = f"""
            Voc√™ √© um especialista em an√°lise de localidades. Organize as informa√ß√µes brutas abaixo sobre o bairro {bairro} em {cidade} em um texto conciso e profissional para um laudo imobili√°rio.

            DADOS BRUTOS:
            {dados_brutos}

            INSTRU√á√ïES:
            1. Organize em 3 se√ß√µes: "Com√©rcio, Lazer e Comodidade", "Seguran√ßa", "Potencial Econ√¥mico e de Crescimento Imobili√°rio"
            2. M√°ximo 5 linhas por se√ß√£o
            3. Linguagem concisa e profissional
            4. Remova informa√ß√µes desnecess√°rias, repeti√ß√µes e caracteres especiais
            5. Foque apenas em informa√ß√µes relevantes para avalia√ß√£o imobili√°ria
            6. Use linguagem clara e objetiva
            7. Se n√£o houver informa√ß√µes espec√≠ficas sobre o bairro, use informa√ß√µes gerais da cidade

            FORMATO ESPERADO:
            Com√©rcio, Lazer e Comodidade:
            [Texto conciso sobre com√©rcio e servi√ßos]

            Seguran√ßa:
            [Texto conciso sobre seguran√ßa]

            Potencial Econ√¥mico e de Crescimento Imobili√°rio:
            [Texto conciso sobre potencial econ√¥mico]

            Responda APENAS com o texto organizado, sem explica√ß√µes adicionais.
            """
            
            # Usar a IA para tratar os dados
            if self.agent and self.agent.model:
                resposta_ia = self.agent.model.invoke(prompt_ia)
                
                if resposta_ia and str(resposta_ia).strip():
                    texto_limpo = self._limpar_resposta_ia(str(resposta_ia))
                    return texto_limpo
                else:
                    return None
            else:
                return None
                
        except Exception as e:
            print(f"‚ùå Erro no tratamento pela IA: {e}")
            return None
    
    def _limpar_resposta_ia(self, texto):
        """Limpa a resposta da IA"""
        if not texto:
            return ""
        
        # Limpeza b√°sica
        texto = str(texto).strip()
        
        # Remover caracteres de escape
        texto = texto.replace('\\n', '\n')
        texto = texto.replace('\\"', '"')
        
        # Remover formata√ß√£o markdown se houver
        texto = re.sub(r'\*\*([^*]+)\*\*', r'\1', texto)
        texto = re.sub(r'\*([^*]+)\*', r'\1', texto)
        
        # Limpar espa√ßos m√∫ltiplos
        texto = re.sub(r'\s+', ' ', texto)
        texto = re.sub(r' \n', '\n', texto)
        
        return texto.strip()
    
    def _gerar_texto_padrao_fallback(self, cidade, bairro):
        """Texto padr√£o quando n√£o consegue fazer pesquisa real"""
        return f"""Com√©rcio, Lazer e Comodidade:
{bairro} em {cidade} oferece com√©rcio local e servi√ßos essenciais b√°sicos. 
Disponibilidade de mercados, padarias e farm√°cias no entorno da regi√£o.

Seguran√ßa:
{cidade} apresenta n√≠veis de seguran√ßa t√≠picos da regi√£o. 
{bairro} mant√©m caracter√≠sticas de seguran√ßa compat√≠veis com o perfil da cidade.

Potencial Econ√¥mico e de Crescimento Imobili√°rio:
{bairro} em {cidade} possui potencial de desenvolvimento baseado na 
localiza√ß√£o e infraestrutura dispon√≠vel na regi√£o.

‚ö†Ô∏è NOTA: Informa√ß√µes gerais - configure a chave TAVILY_API_KEY para obter dados espec√≠ficos e atualizados."""
    
    def verificar_configuracao(self):
        """Verifica se a configura√ß√£o est√° correta"""
        print("üîç Verificando configura√ß√£o...")
        
        if not self.tavily_key or self.tavily_key == 'sua_chave_tavily_aqui':
            print("‚ùå TAVILY_API_KEY n√£o configurada!")
            return False
        
        if not self.openai_key or self.openai_key == 'sua_chave_openai_aqui':
            print("‚ùå OPENAI_API_KEY n√£o configurada!")
            return False
        
        if self.agent:
            print("‚úÖ Configura√ß√£o correta!")
            return True
        else:
            print("‚ùå Erro na configura√ß√£o do agente")
            return False

def main():
    """Teste da vers√£o com IA"""
    print("üöÄ TESTE DA PESQUISA COM IA")
    print("=" * 50)
    
    pesquisa = PesquisaLocalidadeComIA()
    
    # Verificar configura√ß√£o
    if not pesquisa.verificar_configuracao():
        print("\n‚ö†Ô∏è Configure as chaves de API para testar a pesquisa real")
        return
    
    cidade = "S√£o Paulo"
    bairro = "Consola√ß√£o"
    
    print(f"\nüìç Testando pesquisa real: {bairro}, {cidade}")
    
    start_time = time.time()
    texto = pesquisa.gerar_texto_pesquisa_localidade(cidade, bairro)
    total_time = time.time() - start_time
    
    print(f"\n‚è±Ô∏è Tempo total: {total_time:.1f} segundos")
    
    if texto:
        print("\n‚úÖ Resultado TRATADO PELA IA:")
        print("=" * 50)
        print(texto)
        print("=" * 50)
    else:
        print("\n‚ö†Ô∏è Nenhuma informa√ß√£o encontrada")

if __name__ == "__main__":
    main()
