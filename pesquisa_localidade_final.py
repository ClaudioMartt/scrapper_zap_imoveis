import os
import time
from agno.agent import Agent
from agno.tools.tavily import TavilyTools
from agno.models.openai import OpenAIChat
from dotenv import load_dotenv
import re

load_dotenv()

class PesquisaLocalidadeFinal:
    def __init__(self):
        """Inicializa a pesquisa com verifica√ß√£o de chaves"""
        self.timeout = 30
        self.cache = {}
        
        # Verificar se as chaves est√£o configuradas
        self.tavily_key = os.getenv('TAVILY_API_KEY')
        self.openai_key = os.getenv('OPENAI_API_KEY')
        
        if not self.tavily_key or self.tavily_key == 'sua_chave_tavily_aqui':
            print("‚ö†Ô∏è AVISO: TAVILY_API_KEY n√£o configurada!")
            self.agent = None
        else:
            try:
                model = OpenAIChat(id="gpt-4o-mini")
                self.agent = Agent(tools=[TavilyTools()])
                self.agent.model = model
                print("‚úÖ Tavily configurado corretamente!")
                
            except Exception as e:
                print(f"‚ùå Erro ao configurar Tavily: {e}")
                self.agent = None
        
    def gerar_texto_pesquisa_localidade(self, cidade, bairro):
        """Gera texto de pesquisa REAL usando Tavily com texto final limpo"""
        try:
            # Verificar cache primeiro
            cache_key = f"{cidade}_{bairro}_final"
            if cache_key in self.cache:
                print("üìã Usando dados do cache")
                return self.cache[cache_key]
            
            # Verificar se Tavily est√° configurado
            if not self.agent:
                print("‚ö†Ô∏è Tavily n√£o configurado, usando texto padr√£o")
                return self._gerar_texto_padrao_fallback(cidade, bairro)
            
            print(f"üîç Pesquisando informa√ß√µes REAIS para {bairro}, {cidade}...")
            start_time = time.time()
            
            # Query simples e direta
            query = f"""Informa√ß√µes sobre {bairro} em {cidade} S√£o Paulo: com√©rcio, servi√ßos, lazer, seguran√ßa e potencial econ√¥mico. Foque especificamente no bairro {bairro}."""
            
            # Executar pesquisa REAL
            response = self.agent.run(query)
            tempo_pesquisa = time.time() - start_time
            
            print(f"‚è±Ô∏è Pesquisa REAL conclu√≠da em {tempo_pesquisa:.1f} segundos")
            
            # Verificar se a resposta √© v√°lida
            if response and str(response).strip():
                # Processar resposta real com limpeza final
                texto_final = self._processar_resposta_final(str(response), cidade, bairro)
                
                if texto_final and len(texto_final) > 50:
                    self.cache[cache_key] = texto_final
                    print("‚úÖ Informa√ß√µes reais obtidas e processadas com sucesso!")
                    return texto_final
                else:
                    print("‚ö†Ô∏è Resposta muito curta, usando texto padr√£o")
                    return self._gerar_texto_padrao_fallback(cidade, bairro)
            else:
                print("‚ö†Ô∏è Resposta vazia, usando texto padr√£o")
                return self._gerar_texto_padrao_fallback(cidade, bairro)
                
        except Exception as e:
            print(f"‚ùå Erro na pesquisa real: {e}")
            return self._gerar_texto_padrao_fallback(cidade, bairro)
    
    def _processar_resposta_final(self, texto, cidade, bairro):
        """Processa a resposta do Tavily com limpeza final"""
        if not texto:
            return ""
        
        # Limpeza extrema de texto desnecess√°rio
        texto = self._limpar_texto_extremo(texto)
        
        # Extrair informa√ß√µes essenciais
        secoes = self._extrair_informacoes_essenciais(texto, cidade, bairro)
        
        # Montar texto final conciso (m√°ximo 5 linhas por se√ß√£o)
        texto_final = ""
        
        if secoes['comercio']:
            texto_final += f"Com√©rcio, Lazer e Comodidade:\n{secoes['comercio']}\n\n"
        
        if secoes['seguranca']:
            texto_final += f"Seguran√ßa:\n{secoes['seguranca']}\n\n"
        
        if secoes['potencial']:
            texto_final += f"Potencial Econ√¥mico e de Crescimento Imobili√°rio:\n{secoes['potencial']}\n\n"
        
        # Se n√£o conseguiu extrair se√ß√µes espec√≠ficas, usar texto geral resumido
        if not texto_final.strip():
            texto_resumido = self._resumir_texto_essencial(texto, 300)
            texto_final = f"Informa√ß√µes sobre {bairro}, {cidade}:\n{texto_resumido}"
        
        return texto_final.strip()
    
    def _limpar_texto_extremo(self, texto):
        """Limpeza extrema removendo tudo que n√£o √© relevante"""
        if not texto:
            return ""
        
        # Remover textos desnecess√°rios
        texto = str(texto)
        
        # Remover completamente textos indesejados
        textos_remover = [
            'RunResponse content', 'content', 'name=None', 'tool_call_id=None', 'to...',
            'Vis√£o Geral do Bairro', 'Destacam-se', 'apresenta uma perspectiva',
            'enquanto alguns', 'relatam que', 'contribuem para', 'fazem do bairro',
            'Esta centralidade', 'com varia√ß√µes de', 'dependendo da localiza√ß√£o',
            'Vamos explorar cada um desses aspectos', 'Como consult√≥rios',
            'Considera√ß√µes Finais Em resumo', 'Na f√°cil acesso',
            'As percep√ß√µes sobre', 's√£o misturadas', 'mencionam preocupa√ß√µes',
            'A qualidade das ruas', 'foram tamb√©m citadas'
        ]
        
        for texto_remover in textos_remover:
            texto = texto.replace(texto_remover, ' ')
        
        # Remover caracteres de escape e formata√ß√£o
        texto = texto.replace('\\n', ' ')
        texto = texto.replace('\n', ' ')
        texto = texto.replace('\\"', '"')
        texto = texto.replace('\\', ' ')
        texto = texto.replace('‚Ä¢', '')
        texto = texto.replace('**', '')
        texto = texto.replace('*', '')
        
        # Remover formata√ß√£o markdown
        texto = re.sub(r'###?\s*', '', texto)
        texto = re.sub(r'##\s*', '', texto)
        texto = re.sub(r'#\s*', '', texto)
        texto = re.sub(r'-\s*', '', texto)
        texto = re.sub(r'\d+\.\s*', '', texto)
        
        # Remover URLs e links
        texto = re.sub(r'http[s]?://[^\s]+', '', texto)
        texto = re.sub(r'\([^)]*\.html[^)]*\)', '', texto)
        texto = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', texto)
        
        # Remover valores monet√°rios incompletos
        texto = re.sub(r'R\s*\$\s*000', 'R$ valores variados', texto)
        texto = re.sub(r'R\s*\$\s*525', '', texto)
        texto = re.sub(r'R\s*\$\s*\d+\.000', 'R$ valores variados', texto)
        
        # Limpar espa√ßos m√∫ltiplos
        texto = re.sub(r'\s+', ' ', texto)
        texto = texto.strip()
        
        return texto
    
    def _extrair_informacoes_essenciais(self, texto, cidade, bairro):
        """Extrai apenas informa√ß√µes essenciais com m√°ximo de 5 linhas cada"""
        secoes = {
            'comercio': '',
            'seguranca': '',
            'potencial': ''
        }
        
        texto_lower = texto.lower()
        
        # Palavras-chave espec√≠ficas para cada se√ß√£o
        palavras_comercio = ['com√©rcio', 'mercado', 'supermercado', 'padaria', 'farm√°cia', 'posto', 'banco', 'loja', 'shopping', 'restaurante', 'comercial', 'servi√ßos', 'centro comercial']
        palavras_seguranca = ['seguran√ßa', 'criminalidade', 'viol√™ncia', 'policial', 'crime', 'roubo', 'furto', 'homic√≠dio', 'policiamento', 'presen√ßa policial', 'assaltos']
        palavras_potencial = ['crescimento', 'investimento', 'desenvolvimento', 'valoriza√ß√£o', 'econ√¥mico', 'imobili√°rio', 'aluguel', 'pre√ßos', 'valores', 'im√≥veis']
        
        # Extrair se√ß√µes com foco em informa√ß√µes essenciais
        for secao, palavras in [('comercio', palavras_comercio), ('seguranca', palavras_seguranca), ('potencial', palavras_potencial)]:
            informacoes_encontradas = []
            
            for palavra in palavras:
                if palavra in texto_lower:
                    inicio = texto_lower.find(palavra)
                    if inicio != -1:
                        # Pegar contexto menor para evitar repeti√ß√µes
                        inicio_contexto = max(0, inicio - 30)
                        fim_contexto = min(len(texto), inicio + 150)
                        contexto = texto[inicio_contexto:fim_contexto]
                        
                        contexto_limpo = self._limpar_contexto_final(contexto)
                        if contexto_limpo and len(contexto_limpo) > 15:
                            informacoes_encontradas.append(contexto_limpo)
            
            # Combinar informa√ß√µes e limitar a 5 linhas
            if informacoes_encontradas:
                texto_combinado = ' '.join(informacoes_encontradas[:1])  # Apenas 1 contexto por se√ß√£o
                secoes[secao] = self._limitar_linhas_final(texto_combinado, 5)
        
        return secoes
    
    def _limpar_contexto_final(self, contexto):
        """Limpa um contexto espec√≠fico de forma final"""
        if not contexto:
            return ""
        
        # Limpeza b√°sica
        contexto = contexto.strip()
        contexto = re.sub(r'\s+', ' ', contexto)
        
        # Remover frases desnecess√°rias
        frases_remover = [
            'apresenta uma perspectiva', 'enquanto alguns moradores',
            'relatam que a presen√ßa', 'contribuem para uma sensa√ß√£o',
            'Esta centralidade e diversidade', 'fazem do bairro um lugar',
            'com varia√ß√µes de', 'dependendo da localiza√ß√£o',
            'Vamos explorar cada um desses aspectos', 'Como consult√≥rios',
            'Considera√ß√µes Finais Em resumo', 'Na f√°cil acesso',
            'As percep√ß√µes sobre', 's√£o misturadas', 'mencionam preocupa√ß√µes',
            'A qualidade das ruas', 'foram tamb√©m citadas'
        ]
        
        for frase in frases_remover:
            contexto = contexto.replace(frase, ' ')
        
        # Capitalizar primeira letra
        if contexto:
            contexto = contexto[0].upper() + contexto[1:]
        
        # Adicionar ponto final se necess√°rio
        if contexto and not contexto.endswith(('.', '!', '?')):
            contexto += "."
        
        return contexto
    
    def _limitar_linhas_final(self, texto, max_linhas):
        """Limita o texto a um n√∫mero m√°ximo de linhas de forma rigorosa"""
        if not texto:
            return ""
        
        # Dividir em senten√ßas
        sentencas = re.split(r'[.!?]+', texto)
        sentencas = [s.strip() for s in sentencas if s.strip()]
        
        # Pegar apenas as primeiras senten√ßas necess√°rias
        texto_limite = []
        palavras_totais = 0
        palavras_por_linha = 12  # Aproximadamente 12 palavras por linha
        palavras_maximas = max_linhas * palavras_por_linha
        
        for sentenca in sentencas:
            if sentenca:
                palavras_sentenca = len(sentenca.split())
                if palavras_totais + palavras_sentenca <= palavras_maximas:
                    texto_limite.append(sentenca)
                    palavras_totais += palavras_sentenca
                else:
                    break
        
        resultado = '. '.join(texto_limite)
        if resultado and not resultado.endswith('.'):
            resultado += '.'
        
        return resultado
    
    def _resumir_texto_essencial(self, texto, max_chars):
        """Resume o texto de forma essencial"""
        if len(texto) <= max_chars:
            return texto
        
        # Tentar quebrar em frase completa
        texto_resumido = texto[:max_chars]
        ultimo_ponto = texto_resumido.rfind('.')
        
        if ultimo_ponto > max_chars * 0.7:
            return texto_resumido[:ultimo_ponto + 1]
        else:
            return texto_resumido + "..."
    
    def _gerar_texto_padrao_fallback(self, cidade, bairro):
        """Texto padr√£o quando n√£o consegue fazer pesquisa real"""
        return f"""Com√©rcio, Lazer e Comodidade:
{bairro} em {cidade} oferece com√©rcio local e servi√ßos essenciais b√°sicos. 
Disponibilidade de mercados, padarias e farm√°cias no entorno da regi√£o.

Seguran√ßa:
{cidade} apresenta n√≠veis de seguran√ßa t√≠picos da regi√£o. 
{bairro} mant√©m caracter√≠sticas de seguran√ßa compat√≠veis com o perfil da cidade.

Potencial Econ√¥mico e de Crescimento Imobili√°rio:
{bairro} em {cidade} possui potencial de desenvolvimento baseado na 
localiza√ß√£o e infraestrutura dispon√≠vel na regi√£o.

‚ö†Ô∏è NOTA: Informa√ß√µes gerais - configure a chave TAVILY_API_KEY para obter dados espec√≠ficos e atualizados."""
    
    def verificar_configuracao(self):
        """Verifica se a configura√ß√£o est√° correta"""
        print("üîç Verificando configura√ß√£o...")
        
        if not self.tavily_key or self.tavily_key == 'sua_chave_tavily_aqui':
            print("‚ùå TAVILY_API_KEY n√£o configurada!")
            return False
        
        if not self.openai_key or self.openai_key == 'sua_chave_openai_aqui':
            print("‚ùå OPENAI_API_KEY n√£o configurada!")
            return False
        
        if self.agent:
            print("‚úÖ Configura√ß√£o correta!")
            return True
        else:
            print("‚ùå Erro na configura√ß√£o do agente")
            return False

def main():
    """Teste da vers√£o final"""
    print("üöÄ TESTE DA PESQUISA FINAL")
    print("=" * 50)
    
    pesquisa = PesquisaLocalidadeFinal()
    
    # Verificar configura√ß√£o
    if not pesquisa.verificar_configuracao():
        print("\n‚ö†Ô∏è Configure as chaves de API para testar a pesquisa real")
        return
    
    cidade = "S√£o Paulo"
    bairro = "Consola√ß√£o"
    
    print(f"\nüìç Testando pesquisa real: {bairro}, {cidade}")
    
    start_time = time.time()
    texto = pesquisa.gerar_texto_pesquisa_localidade(cidade, bairro)
    total_time = time.time() - start_time
    
    print(f"\n‚è±Ô∏è Tempo total: {total_time:.1f} segundos")
    
    if texto:
        print("\n‚úÖ Resultado FINAL:")
        print("=" * 50)
        print(texto)
        print("=" * 50)
    else:
        print("\n‚ö†Ô∏è Nenhuma informa√ß√£o encontrada")

if __name__ == "__main__":
    main()
